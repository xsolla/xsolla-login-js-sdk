{"version":3,"sources":["node_modules/browser-pack/_prelude.js","node_modules/to-no-case/index.js","node_modules/to-snake-case/index.js","node_modules/to-space-case/index.js","../package.json","src/supports.js","src/xlapi.js","src/main.js"],"names":["f","exports","module","define","amd","window","global","self","this","XL","r","e","n","t","o","i","c","require","u","a","Error","code","p","call","length","1","string","hasSpace","test","toLowerCase","hasSeparator","replace","separatorSplitter","m","next","hasCamel","camelSplitter","previous","uppers","split","join","2","toSpace","to-space-case","3","clean","matches","match","trim","to-no-case","4","version","String","prototype","startsWith","searchString","position","indexOf","CustomEvent","event","params","bubbles","cancelable","detail","undefined","evt","document","createEvent","initCustomEvent","Event","6","XLApi","projectId","baseUrl","makeApiCall","success","error","XMLHttpRequest","withCredentials","open","method","endpoint","onreadystatechange","readyState","status","JSON","parse","responseText","message","send","getArguments","str","key","_createClass","defineProperties","target","props","descriptor","enumerable","configurable","writable","Object","defineProperty","Constructor","protoProps","staticProps","ROUTES","REGISTRATION","RECOVER_PASSWORD","ALL_SOCIALS","SOCIALS_LOGIN","USERNAME_LOGIN","apiUrl","onlyWidgets","widgetBaseUrl","response_type","widgetIframe","createElement","result","instance","TypeError","_classCallCheck","socialUrls","eventTypes","LOAD","CLOSE","HIDE_POPUP","REGISTRATION_REQUEST","AUTHENTICATED","dispatcher","onHideEvent","bind","value","options","_this","config","_extends","DEFAULT_CONFIG","popupBackgroundColor","api","_xlapi2","default","eventMethod","addEventListener","data","type","dispatchEvent","keys","map","eventKey","redirectUrl","redirect_url","login_url","loginUrl","prop","authType","location","href","finish","finishAuth","res","_this2","createErrorObject","err","smsAuthStep","smsAuth","phoneNumber","console","theme","callbackUrl","externalWindow","defaultLoginUrl","getLink","apply","arguments","substr","src","route","encodeURIComponent","getProjectId","useOAuth2","_iteratorNormalCompletion","_didIteratorError","_iteratorError","option","_step","IGNORELIST","includes","snakeOption","toSnakeCase","_iterator","return","getCallbackUrl","_config","state","Math","random","toString","substring","widgetVersion","elementId","_this3","width","height","style","frameBorder","_preloader","getElementById","_element","parentNode","removeChild","zIndex","backgroundColor","_hide","handler","removeEventListener","onCloseEvent","iframeZIndex","left","top","inFullscreenMode","_this4","IFRAME_ID","_show","getIframeSrc","id","onload","body","appendChild","../package.json","./supports","./xlapi","to-snake-case"],"mappings":"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","file":"xl.min.js","sourcesContent":["(function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c=\"function\"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error(\"Cannot find module '\"+i+\"'\");throw a.code=\"MODULE_NOT_FOUND\",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u=\"function\"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()","\n/**\n * Export.\n */\n\nmodule.exports = toNoCase\n\n/**\n * Test whether a string is camel-case.\n */\n\nvar hasSpace = /\\s/\nvar hasSeparator = /(_|-|\\.|:)/\nvar hasCamel = /([a-z][A-Z]|[A-Z][a-z])/\n\n/**\n * Remove any starting case from a `string`, like camel or snake, but keep\n * spaces and punctuation that may be important otherwise.\n *\n * @param {String} string\n * @return {String}\n */\n\nfunction toNoCase(string) {\n  if (hasSpace.test(string)) return string.toLowerCase()\n  if (hasSeparator.test(string)) return (unseparate(string) || string).toLowerCase()\n  if (hasCamel.test(string)) return uncamelize(string).toLowerCase()\n  return string.toLowerCase()\n}\n\n/**\n * Separator splitter.\n */\n\nvar separatorSplitter = /[\\W_]+(.|$)/g\n\n/**\n * Un-separate a `string`.\n *\n * @param {String} string\n * @return {String}\n */\n\nfunction unseparate(string) {\n  return string.replace(separatorSplitter, function (m, next) {\n    return next ? ' ' + next : ''\n  })\n}\n\n/**\n * Camelcase splitter.\n */\n\nvar camelSplitter = /(.)([A-Z]+)/g\n\n/**\n * Un-camelcase a `string`.\n *\n * @param {String} string\n * @return {String}\n */\n\nfunction uncamelize(string) {\n  return string.replace(camelSplitter, function (m, previous, uppers) {\n    return previous + ' ' + uppers.toLowerCase().split('').join(' ')\n  })\n}\n","\nvar toSpace = require('to-space-case')\n\n/**\n * Export.\n */\n\nmodule.exports = toSnakeCase\n\n/**\n * Convert a `string` to snake case.\n *\n * @param {String} string\n * @return {String}\n */\n\nfunction toSnakeCase(string) {\n  return toSpace(string).replace(/\\s/g, '_')\n}\n","\nvar clean = require('to-no-case')\n\n/**\n * Export.\n */\n\nmodule.exports = toSpaceCase\n\n/**\n * Convert a `string` to space case.\n *\n * @param {String} string\n * @return {String}\n */\n\nfunction toSpaceCase(string) {\n  return clean(string).replace(/[\\W_]+(.|$)/g, function (matches, match) {\n    return match ? ' ' + match : ''\n  }).trim()\n}\n","module.exports={\n  \"name\": \"xsolla-login-js-sdk\",\n  \"version\": \"2.2.3\",\n  \"description\": \"\",\n  \"main\": \"src/main.js\",\n  \"scripts\": {\n    \"build\": \"gulp build\",\n    \"host\": \"static-server . -p 8084\",\n    \"test\": \"jest\"\n  },\n  \"author\": \"\",\n  \"license\": \"MIT\",\n  \"dependencies\": {\n    \"to-snake-case\": \"^1.0.0\"\n  },\n  \"devDependencies\": {\n    \"@babel/core\": \"^7.4.5\",\n    \"@babel/preset-env\": \"^7.4.5\",\n    \"babel-jest\": \"^24.8.0\",\n    \"babel-plugin-transform-object-assign\": \"^6.22.0\",\n    \"babel-preset-es2015\": \"^6.18.0\",\n    \"babelify\": \"^7.3.0\",\n    \"bower\": \"^1.8.8\",\n    \"brfs\": \"^2.0.1\",\n    \"browser-sync\": \"^2.26.7\",\n    \"browserify\": \"^16.2.3\",\n    \"browserify-istanbul\": \"^2.0.0\",\n    \"browserify-shim\": \"^3.8.12\",\n    \"common-shakeify\": \"^0.6.0\",\n    \"gulp\": \"^4.0.2\",\n    \"gulp-if\": \"^2.0.2\",\n    \"gulp-rename\": \"1.2.0\",\n    \"gulp-sourcemaps\": \"^2.6.5\",\n    \"gulp-strip-comments\": \"^2.5.2\",\n    \"gulp-uglify\": \"^3.0.1\",\n    \"gulp-util\": \"3.0.6\",\n    \"jasmine\": \"^2.4.1\",\n    \"jest\": \"^24.8.0\",\n    \"jsdom\": \"^15.1.1\",\n    \"static-server\": \"2.2.1\",\n    \"url-parse\": \"^1.4.7\",\n    \"vinyl-buffer\": \"^1.0.1\",\n    \"vinyl-source-stream\": \"^2.0.0\",\n    \"watchify\": \"^3.11.1\"\n  },\n  \"browserify-shim\": {\n    \"external\": \"global:External\"\n  }\n}\n","/**\n * Created by a.korotaev on 07.11.16.\n */\nif (!String.prototype.startsWith) {\n    String.prototype.startsWith = function(searchString, position) {\n        position = position || 0;\n        return this.indexOf(searchString, position) === position;\n    };\n}\n\nif ( typeof window.CustomEvent !== \"function\" ) {\n    function CustomEvent(event, params) {\n        params = params || {bubbles: false, cancelable: false, detail: undefined};\n        var evt = document.createEvent('CustomEvent');\n        evt.initCustomEvent(event, params.bubbles, params.cancelable, params.detail);\n        return evt;\n    }\n\n    CustomEvent.prototype = window.Event.prototype;\n\n    window.CustomEvent = CustomEvent;\n}","/**\n * Created by a.korotaev on 24.06.16.\n */\n/**\n * Impelements Xsolla Login Api\n * @param projectId - project's unique identifier\n * @param baseUrl - api endpoint\n * @constructor\n */\n\nvar XLApi = function (projectId, baseUrl) {\n    var self = this;\n    this.baseUrl = baseUrl || '//login.xsolla.com/api/';\n\n    this.projectId = projectId;\n\n    this.makeApiCall = function (params, success, error) {\n        var r = new XMLHttpRequest();\n        r.withCredentials = true;\n        r.open(params.method, self.baseUrl + params.endpoint, true);\n        r.onreadystatechange = function () {\n            if (r.readyState == 4) {\n                if (r.status == 200) {\n                    success(JSON.parse(r.responseText));\n                } else {\n                    if (r.responseText) {\n                        error(JSON.parse(r.responseText));\n                    } else {\n                        error({error: {message: 'Networking error', code: r.status}});\n                    }\n                }\n            }\n        };\n        if (params.method == 'POST') {\n            r.setRequestHeader(\"Content-Type\", \"application/json;charset=UTF-8\");\n            r.send(params.postBody);\n        } else if (params.method == 'GET') {\n            r.send(params.getArguments);\n        }\n    };\n};\n/**\n * Get all avialable social methods auth url\n * @param success - success callback\n * @param error - error callback\n * @param getArguments - additional params to send with request\n */\nXLApi.prototype.getSocialsURLs = function (success, error, getArguments) {\n    var str = \"\";\n    for (var key in getArguments) {\n        if (str != \"\") {\n            str += \"&\";\n        }\n        str += key + \"=\" + encodeURIComponent(getArguments[key]);\n    }\n\n    return this.makeApiCall({method: 'GET', endpoint: 'social/login_urls?' + str, getArguments: null}, success, error);\n};\n\nXLApi.prototype.loginPassAuth = function (login, pass, rememberMe, redirectUrl, success, error) {\n    var body = {\n        username: login,\n        password: pass,\n        remember_me: rememberMe\n    };\n    return this.makeApiCall({method: 'POST', endpoint: 'proxy/login?projectId='+this.projectId + '&redirect_url=' + encodeURIComponent(redirectUrl), postBody: JSON.stringify(body)}, success, error);\n};\n\nXLApi.prototype.smsAuth = function (phoneNumber, success, error) {\n    return this.makeApiCall({method: 'GET', endpoint: 'sms', getArguments: 'phoneNumber=' + phoneNumber}, success, error);\n};\n\nmodule.exports = XLApi;\n","/**\n * Created by a.korotaev on 24.06.16.\n */\nconst toSnakeCase = require('to-snake-case');\n\nrequire('./supports');\nconst version = require('../package.json').version;\n\nimport XLApi from './xlapi';\n/**\n * Create an `Auth0` instance with `options`\n *\n * @class XL\n * @constructor\n */\n\nconst ROUTES = {\n    LOGIN: '',\n    REGISTRATION: 'registration',\n    RECOVER_PASSWORD: 'reset-password',\n    ALL_SOCIALS: 'other',\n    SOCIALS_LOGIN: 'socials',\n    USERNAME_LOGIN: 'username-login',\n};\n\nconst IGNORELIST = [\n    'onlyWidgets',\n    'apiUrl',\n    'defaultLoginUrl',\n    'popupBackgroundColor',\n    'iframeZIndex',\n    'preloader',\n    'widgetBaseUrl',\n    'route',\n    'inFullscreenMode',\n\n    'redirectUrl',\n    'widgetVersion',\n    'projectId',\n\n    'callbackUrl',\n    'loginUrl',\n    'state',\n];\n\nconst DEFAULT_CONFIG = {\n    apiUrl: 'https://login.xsolla.com/api/',\n    onlyWidgets: false,\n    defaultLoginUrl: 'https://xl-widget.xsolla.com/auth.html',\n    popupBackgroundColor: 'rgb(187, 187, 187)',\n    iframeZIndex: 1000000,\n    preloader: '<div></div>',\n    widgetBaseUrl: 'https://xl-widget.xsolla.com/',\n    route: ROUTES.LOGIN,\n    inFullscreenMode: false,\n    response_type: 'code'\n};\n\nconst INVALID_LOGIN_ERROR_CODE = 1;\nconst INCORRECT_LOGIN_OR_PASSWORD_ERROR_CODE = 2;\n\nconst IFRAME_ID = 'XsollaLoginWidgetIframe';\nconst widgetIframe = document.createElement('iframe');\n\nclass XL {\n    constructor() {\n        this.socialUrls = {};\n        this.eventTypes = {\n            LOAD: 'load',\n            CLOSE: 'close',\n            HIDE_POPUP: 'hide popup',\n            REGISTRATION_REQUEST: 'registration request',\n            AUTHENTICATED: 'authenticated'\n        };\n\n        // need for export purposes\n        this.ROUTES = ROUTES;\n\n        this.dispatcher = document.createElement('div');\n        this.onHideEvent = this.onHideEvent.bind(this);\n    }\n\n    init(options) {\n        this.config = Object.assign({}, DEFAULT_CONFIG, options);\n        this.config.popupBackgroundColor = DEFAULT_CONFIG.popupBackgroundColor;\n        this.api = new XLApi(options.projectId, this.config.apiUrl);\n\n        const eventMethod = window.addEventListener ? 'addEventListener' : 'attachEvent';\n        const eventer = window[eventMethod];\n        const messageEvent = eventMethod === 'attachEvent' ? 'onmessage' : 'message';\n\n        // Listen to message from child window\n        eventer(messageEvent, (e) => {\n            let event;\n            if (typeof e.data === 'string') {\n                // Old format - string only\n                event = new CustomEvent(this.eventTypes[e.data]);\n            } else {\n                // New format - {type: 'event', ...}\n                event = new CustomEvent(this.eventTypes[e.data.type], {detail: e.data});\n            }\n            this.dispatcher.dispatchEvent(event);\n        }, false);\n\n        Object.keys(this.eventTypes).map((eventKey) => {\n            this.on(this.eventTypes[eventKey]);\n        });\n\n        if(options.popupBackgroundColor) {\n            this.config.popupBackgroundColor = options.popupBackgroundColor;\n        }\n\n        this.dispatcher.addEventListener(this.eventTypes.HIDE_POPUP, this.onHideEvent);\n\n        if (!this.config.onlyWidgets) {\n\n            let params = {};\n            params.projectId = options.projectId;\n            if (this.config.redirectUrl) {\n                params.redirect_url = this.config.redirectUrl;\n            }\n            if (this.config.loginUrl) {\n                params.login_url = this.config.loginUrl;\n            }\n            if (this.config.callbackUrl) {\n                params.login_url = this.config.callbackUrl;\n            }\n        }\n    }\n\n    /**\n     * Performs login\n     * @param prop\n     * @param error - call in case error\n     * @param success\n     */\n    login(prop, error, success) {\n\n        if (!prop || !this.socialUrls) {\n            return;\n        }\n\n        /**\n         * props\n         * authType: sn-<social name>, login-pass, sms\n         */\n        if (prop.authType) {\n            if (prop.authType.startsWith('sn-')) {\n                const socialUrl = this.socialUrls[prop.authType];\n                if (socialUrl != undefined) {\n                    window.location.href = this.socialUrls[prop.authType];\n                } else {\n                    console.error('Auth type: ' + prop.authType + ' doesn\\'t exist');\n                }\n\n            } else if (prop.authType == 'login-pass') {\n                this.api.loginPassAuth(prop.login, prop.pass, prop.rememberMe, this.config.redirectUrl, (res) => {\n                    if (res.login_url) {\n                        const finishAuth = function () {\n                            window.location.href = res.login_url;\n                        };\n                        if (success) {\n                            success({status: 'success', finish: finishAuth, redirectUrl: res.login_url});\n                        } else {\n                            finishAuth();\n                        }\n                    } else {\n                        error(this.createErrorObject('Login or pass not valid', INCORRECT_LOGIN_OR_PASSWORD_ERROR_CODE));\n                    }\n                }, function (err) {\n                    error(err);\n                });\n            } else if (prop.authType == 'sms') {\n                if (smsAuthStep == 'phone') {\n                    this.api.smsAuth(prop.phoneNumber, null, null);\n                } else if (smsAuthStep == 'code') {\n\n                }\n            } else {\n                console.error('Unknown auth type');\n            }\n        }\n    }\n\n    createErrorObject(message, code) {\n        return {\n            error: {\n                message: message,\n                code: code || -1\n            }\n        };\n    };\n\n    getProjectId() {\n        return this.config.projectId;\n    };\n\n    getRedirectURL() {\n        return this.config.redirectUrl;\n    };\n\n    getTheme() {\n        return this.config.theme;\n    }\n\n    getCallbackUrl() {\n        if (this.config.callbackUrl) {\n            return this.config.callbackUrl;\n        } else if (this.config.loginUrl) {\n            return this.config.loginUrl;\n        } else if (this.config.externalWindow) {\n            return DEFAULT_CONFIG.defaultLoginUrl;\n        }\n    };\n\n    /**\n     * @deprecated use getLink instead\n     */\n    getIframeSrc() {\n        return this.getLink.apply(this, arguments);\n    }\n\n    getLink(options = {}) {\n        let widgetBaseUrl = options.widgetBaseUrl || this.config.widgetBaseUrl;\n\n        if (widgetBaseUrl.substr(-1) !== '/') {\n            widgetBaseUrl += '/';\n        }\n\n        const route = options.route || this.config.route;\n\n        let src = widgetBaseUrl + route + '?projectId=' + encodeURIComponent(this.getProjectId()) + '&widget_sdk_version=' + version;\n\n        let useOAuth2 = false;\n\n        // Fields appended by loop\n        // locale, fields, theme, compact, client_id, redirect_uri, response_type, state, externalWindow\n        for (const option of Object.keys(this.config)) {\n            if (!IGNORELIST.includes(option)) {\n                const snakeOption = toSnakeCase(option);\n                if (!useOAuth2 && snakeOption === 'client_id') {\n                    useOAuth2 = true;\n                }\n                src += `&${snakeOption}=${encodeURIComponent(this.config[option])}`\n            }\n        }\n\n        const redirectUrl = this.getRedirectURL();\n        if (redirectUrl) {\n            src = src + '&redirectUrl=' + encodeURIComponent(redirectUrl);\n        }\n\n        const callbackUrl = this.getCallbackUrl();\n\n        if (callbackUrl) {\n            src = src + '&login_url=' + encodeURIComponent(callbackUrl);\n        }\n\n        const {externalWindow, state} = this.config;\n        if (externalWindow) {\n            src = src + '&external_window=' + encodeURIComponent(externalWindow);\n        }\n\n        if (useOAuth2) {\n            src += `&state=${encodeURIComponent(state || Math.random().toString(36).substring(2))}`\n        }\n\n        const widgetVersion = this.config.widgetVersion;\n        if (widgetVersion) {\n            src += '&version=' + encodeURIComponent(widgetVersion);\n        }\n\n        return src;\n    }\n\n    AuthWidget(elementId, options) {\n        if (this.api) {\n            if (!elementId) {\n                console.error('No div name!');\n            } else {\n                if (options == undefined) {\n                    options = {};\n                }\n                const width = `${options.width || 400}px`;\n                const height = `${options.height || 550}px`;\n\n                widgetIframe.onload = () => {\n                    element.removeChild(preloader);\n                    widgetIframe.style.width = '100%';\n                    widgetIframe.style.height = '100%';\n                    let event = new CustomEvent('load');\n                    this.dispatcher.dispatchEvent(event);\n                };\n                widgetIframe.style.width = 0;\n                widgetIframe.style.height = 0;\n                widgetIframe.frameBorder = '0';\n                widgetIframe.src = this.getIframeSrc(options);\n                widgetIframe.id = IFRAME_ID;\n\n                const preloader = document.createElement('div');\n\n                preloader.innerHTML = this.config.preloader;\n\n                const element = document.getElementById(elementId);\n                if (element) {\n                    element.style.width = width;\n                    element.style.height = height;\n                    element.appendChild(preloader);\n                    element.appendChild(widgetIframe);\n                } else {\n                    console.error('Element \\\"' + elementId + '\\\" not found!');\n                }\n\n            }\n        } else {\n            console.error('Please run XL.init() first');\n        }\n    };\n\n    onCloseEvent() {\n        widgetIframe.parentNode.removeChild(widgetIframe);\n    }\n\n    _hide() {\n        widgetIframe.style.position = '';\n        widgetIframe.style.zIndex = '';\n        widgetIframe.style.left = '';\n        widgetIframe.style.top = '';\n        widgetIframe.style.width = 0;\n        widgetIframe.style.height = 0;\n        widgetIframe.style.backgroundColor = '';\n    }\n\n    onHideEvent() {\n        if (this.config.inFullscreenMode) {\n            this._hide();\n        }\n    }\n\n    /**\n     * link event with handler\n     * @param event\n     * @param handler\n     */\n\n    on(event, handler) {\n        handler = handler || function() {};\n\n        if (event === this.eventTypes.CLOSE) {\n            if (!handler) {\n                handler = this.onCloseEvent;\n            }\n            else {\n                this.dispatcher.removeEventListener(event, this.onCloseEvent);\n            }\n        }\n\n        this.dispatcher.addEventListener(event, (e) => handler(e.detail));\n    };\n\n    _show() {\n        widgetIframe.style.position = 'fixed';\n        widgetIframe.style.zIndex = this.config.iframeZIndex;\n        widgetIframe.style.left = '0';\n        widgetIframe.style.top = '0';\n        widgetIframe.style.width = '100%';\n        widgetIframe.style.height = '100%';\n        widgetIframe.style.backgroundColor = this.config.popupBackgroundColor;\n        this.config.inFullscreenMode = true;\n    }\n\n    /**\n     * open fullsreen popup for widget\n     */\n\n    show() {\n        if (!document.getElementById(IFRAME_ID)) {\n            widgetIframe.src = this.getIframeSrc();\n            widgetIframe.id = IFRAME_ID;\n            widgetIframe.style.width = 0;\n            widgetIframe.style.height = 0;\n            widgetIframe.frameBorder = '0';\n\n            widgetIframe.onload = () => {\n                let event = new CustomEvent('load');\n                this.dispatcher.dispatchEvent(event);\n            };\n            this._show();\n\n            document.body.appendChild(widgetIframe);\n        } else {\n            this._show();\n        }\n    };\n}\n\nconst result = new XL();\n\nmodule.exports = result;"],"sourceRoot":"."}