{"version":3,"sources":["node_modules/browser-pack/_prelude.js","../package.json","src/supports.js","src/xlapi.js","src/main.js"],"names":["f","exports","module","define","amd","window","global","self","this","XL","r","e","n","t","o","i","c","require","u","a","Error","code","p","call","length","1","version","2","position","indexOf","searchString","readyState","status","responseText","params","method","setRequestHeader","send","postBody","getArguments","XLApi","prototype","getSocialsURLs","success","error","str","key","makeApiCall","endpoint","password","pass","projectId","encodeURIComponent","redirectUrl","JSON","stringify","body","main","_createClass","Constructor","protoProps","staticProps","defineProperties","target","props","descriptor","enumerable","configurable","writable","Object","defineProperty","obj","_xlapi","_xlapi2","__esModule","default","ROUTES","LOGIN","REGISTRATION","RECOVER_PASSWORD","ALL_SOCIALS","SOCIALS_LOGIN","USERNAME_LOGIN","DEFAULT_CONFIG","errorHandler","maxXLClickDepth","onlyWidgets","defaultLoginUrl","popupBackgroundColor","iframeZIndex","preloader","widgetBaseUrl","route","inFullscreenMode","IFRAME_ID","widgetIframe","document","createElement","instance","TypeError","socialUrls","eventTypes","CLOSE","onHideEvent","bind","result","config","_extends","options","eventMethod","addEventListener","CustomEvent","_this","data","type","detail","dispatcher","dispatchEvent","event","keys","map","eventKey","on","HIDE_POPUP","redirect_url","loginUrl","login_url","callbackUrl","_this2","prop","authType","startsWith","undefined","location","href","console","api","loginPassAuth","login","rememberMe","res","finishAuth","finish","createErrorObject","err","smsAuthStep","smsAuth","phoneNumber","value","message","theme","substr","locale","src","fields","getRedirectURL","getCallbackUrl","getTheme","externalWindow","widgetVersion","compact","elementId","_this3","width","height","_preloader","style","frameBorder","getIframeSrc","id","getElementById","_element","appendChild","parentNode","removeChild","left","backgroundColor","handler","removeEventListener","onCloseEvent","zIndex","top","_this4","_show","../package.json","./supports","./xlapi"],"mappings":"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","file":"xl.min.js","sourcesContent":["(function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c=\"function\"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error(\"Cannot find module '\"+i+\"'\");throw a.code=\"MODULE_NOT_FOUND\",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u=\"function\"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()","module.exports={\n  \"name\": \"xsolla-login-js-sdk\",\n  \"version\": \"2.1.1\",\n  \"description\": \"\",\n  \"main\": \"src/main.js\",\n  \"scripts\": {\n    \"build\": \"gulp build\",\n    \"host\": \"static-server . -p 8084\",\n    \"test\": \"jest\"\n  },\n  \"author\": \"\",\n  \"license\": \"MIT\",\n  \"dependencies\": {},\n  \"devDependencies\": {\n    \"@babel/core\": \"^7.4.5\",\n    \"@babel/preset-env\": \"^7.4.5\",\n    \"babel-jest\": \"^24.8.0\",\n    \"babel-plugin-transform-object-assign\": \"^6.22.0\",\n    \"babel-preset-es2015\": \"^6.18.0\",\n    \"babelify\": \"^7.3.0\",\n    \"bower\": \"^1.8.8\",\n    \"brfs\": \"^2.0.1\",\n    \"browser-sync\": \"^2.26.7\",\n    \"browserify\": \"^16.2.3\",\n    \"browserify-istanbul\": \"^2.0.0\",\n    \"browserify-shim\": \"^3.8.12\",\n    \"common-shakeify\": \"^0.6.0\",\n    \"gulp\": \"^4.0.2\",\n    \"gulp-if\": \"^2.0.2\",\n    \"gulp-rename\": \"1.2.0\",\n    \"gulp-sourcemaps\": \"^2.6.5\",\n    \"gulp-strip-comments\": \"^2.5.2\",\n    \"gulp-uglify\": \"^3.0.1\",\n    \"gulp-util\": \"3.0.6\",\n    \"jasmine\": \"^2.4.1\",\n    \"jest\": \"^24.8.0\",\n    \"jsdom\": \"^15.1.1\",\n    \"static-server\": \"2.2.1\",\n    \"url-parse\": \"^1.4.7\",\n    \"vinyl-buffer\": \"^1.0.1\",\n    \"vinyl-source-stream\": \"^2.0.0\",\n    \"watchify\": \"^3.11.1\"\n  },\n  \"browserify-shim\": {\n    \"external\": \"global:External\"\n  }\n}\n","/**\n * Created by a.korotaev on 07.11.16.\n */\nif (!String.prototype.startsWith) {\n    String.prototype.startsWith = function(searchString, position) {\n        position = position || 0;\n        return this.indexOf(searchString, position) === position;\n    };\n}\n\nif ( typeof window.CustomEvent !== \"function\" ) {\n    function CustomEvent(event, params) {\n        params = params || {bubbles: false, cancelable: false, detail: undefined};\n        var evt = document.createEvent('CustomEvent');\n        evt.initCustomEvent(event, params.bubbles, params.cancelable, params.detail);\n        return evt;\n    }\n\n    CustomEvent.prototype = window.Event.prototype;\n\n    window.CustomEvent = CustomEvent;\n}","/**\n * Created by a.korotaev on 24.06.16.\n */\n/**\n * Impelements Xsolla Login Api\n * @param projectId - project's unique identifier\n * @param baseUrl - api endpoint\n * @constructor\n */\n\nvar XLApi = function (projectId, baseUrl) {\n    var self = this;\n    this.baseUrl = baseUrl || '//login.xsolla.com/api/';\n\n    this.projectId = projectId;\n\n    this.makeApiCall = function (params, success, error) {\n        var r = new XMLHttpRequest();\n        r.withCredentials = true;\n        r.open(params.method, self.baseUrl + params.endpoint, true);\n        r.onreadystatechange = function () {\n            if (r.readyState == 4) {\n                if (r.status == 200) {\n                    success(JSON.parse(r.responseText));\n                } else {\n                    if (r.responseText) {\n                        error(JSON.parse(r.responseText));\n                    } else {\n                        error({error: {message: 'Networking error', code: r.status}});\n                    }\n                }\n            }\n        };\n        if (params.method == 'POST') {\n            r.setRequestHeader(\"Content-Type\", \"application/json;charset=UTF-8\");\n            r.send(params.postBody);\n        } else if (params.method == 'GET') {\n            r.send(params.getArguments);\n        }\n    };\n};\n/**\n * Get all avialable social methods auth url\n * @param success - success callback\n * @param error - error callback\n * @param getArguments - additional params to send with request\n */\nXLApi.prototype.getSocialsURLs = function (success, error, getArguments) {\n    var str = \"\";\n    for (var key in getArguments) {\n        if (str != \"\") {\n            str += \"&\";\n        }\n        str += key + \"=\" + encodeURIComponent(getArguments[key]);\n    }\n\n    return this.makeApiCall({method: 'GET', endpoint: 'social/login_urls?' + str, getArguments: null}, success, error);\n};\n\nXLApi.prototype.loginPassAuth = function (login, pass, rememberMe, redirectUrl, success, error) {\n    var body = {\n        username: login,\n        password: pass,\n        remember_me: rememberMe\n    };\n    return this.makeApiCall({method: 'POST', endpoint: 'proxy/login?projectId='+this.projectId + '&redirect_url=' + encodeURIComponent(redirectUrl), postBody: JSON.stringify(body)}, success, error);\n};\n\nXLApi.prototype.smsAuth = function (phoneNumber, success, error) {\n    return this.makeApiCall({method: 'GET', endpoint: 'sms', getArguments: 'phoneNumber=' + phoneNumber}, success, error);\n};\n\nmodule.exports = XLApi;\n","/**\n * Created by a.korotaev on 24.06.16.\n */\nrequire('./supports');\nconst version = require('../package.json').version;\n\nimport XLApi from './xlapi';\n/**\n * Create an `Auth0` instance with `options`\n *\n * @class XL\n * @constructor\n */\n\nconst ROUTES = {\n    LOGIN: '',\n    REGISTRATION: 'registration',\n    RECOVER_PASSWORD: 'reset-password',\n    ALL_SOCIALS: 'other',\n    SOCIALS_LOGIN: 'socials',\n    USERNAME_LOGIN: 'username-login',\n};\n\nconst DEFAULT_CONFIG = {\n    errorHandler: function (a) {\n    },\n    loginPassValidator: function (a, b) {\n        return true;\n    },\n    isMarkupSocialsHandlersEnabled: false,\n    apiUrl: 'https://login.xsolla.com/api/',\n    maxXLClickDepth: 20,\n    onlyWidgets: false,\n    defaultLoginUrl: 'https://xl-widget.xsolla.com/auth.html',\n    popupBackgroundColor: 'rgb(187, 187, 187)',\n    iframeZIndex: 1000000,\n    preloader: '<div></div>',\n    widgetBaseUrl: 'https://xl-widget.xsolla.com/',\n    route: ROUTES.LOGIN,\n    compact: false,\n    inFullscreenMode: false\n};\n\nconst INVALID_LOGIN_ERROR_CODE = 1;\nconst INCORRECT_LOGIN_OR_PASSWORD_ERROR_CODE = 2;\n\nconst IFRAME_ID = 'XsollaLoginWidgetIframe';\nconst widgetIframe = document.createElement('iframe');\n\nclass XL {\n    constructor() {\n        this.socialUrls = {};\n        this.eventTypes = {\n            LOAD: 'load',\n            CLOSE: 'close',\n            HIDE_POPUP: 'hide popup',\n            REGISTRATION_REQUEST: 'registration request',\n            AUTHENTICATED: 'authenticated'\n        };\n\n        // need for export purposes\n        this.ROUTES = ROUTES;\n\n        this.dispatcher = document.createElement('div');\n        this.onHideEvent = this.onHideEvent.bind(this);\n    }\n\n    init(options) {\n        this.config = Object.assign({}, DEFAULT_CONFIG, options);\n        this.config.popupBackgroundColor = DEFAULT_CONFIG.popupBackgroundColor;\n        this.api = new XLApi(options.projectId, this.config.apiUrl);\n\n        const eventMethod = window.addEventListener ? 'addEventListener' : 'attachEvent';\n        const eventer = window[eventMethod];\n        const messageEvent = eventMethod === 'attachEvent' ? 'onmessage' : 'message';\n\n        // Listen to message from child window\n        eventer(messageEvent, (e) => {\n            let event;\n            if (typeof e.data === 'string') {\n                // Old format - string only\n                event = new CustomEvent(this.eventTypes[e.data]);\n            } else {\n                // New format - {type: 'event', ...}\n                event = new CustomEvent(this.eventTypes[e.data.type], {detail: e.data});\n            }\n            this.dispatcher.dispatchEvent(event);\n        }, false);\n\n        Object.keys(this.eventTypes).map((eventKey) => {\n            this.on(this.eventTypes[eventKey]);\n        });\n\n        if(options.popupBackgroundColor) {\n            this.config.popupBackgroundColor = options.popupBackgroundColor;\n        }\n\n        this.dispatcher.addEventListener(this.eventTypes.HIDE_POPUP, this.onHideEvent);\n\n        if (!this.config.onlyWidgets) {\n\n            let params = {};\n            params.projectId = options.projectId;\n            if (this.config.redirectUrl) {\n                params.redirect_url = this.config.redirectUrl;\n            }\n            if (this.config.loginUrl) {\n                params.login_url = this.config.loginUrl;\n            }\n            if (this.config.callbackUrl) {\n                params.login_url = this.config.callbackUrl;\n            }\n        }\n    }\n\n    /**\n     * Performs login\n     * @param prop\n     * @param error - call in case error\n     * @param success\n     */\n    login(prop, error, success) {\n\n        if (!prop || !this.socialUrls) {\n            return;\n        }\n\n        /**\n         * props\n         * authType: sn-<social name>, login-pass, sms\n         */\n        if (prop.authType) {\n            if (prop.authType.startsWith('sn-')) {\n                const socialUrl = this.socialUrls[prop.authType];\n                if (socialUrl != undefined) {\n                    window.location.href = this.socialUrls[prop.authType];\n                } else {\n                    console.error('Auth type: ' + prop.authType + ' doesn\\'t exist');\n                }\n\n            } else if (prop.authType == 'login-pass') {\n                this.api.loginPassAuth(prop.login, prop.pass, prop.rememberMe, this.config.redirectUrl, (res) => {\n                    if (res.login_url) {\n                        const finishAuth = function () {\n                            window.location.href = res.login_url;\n                        };\n                        if (success) {\n                            success({status: 'success', finish: finishAuth, redirectUrl: res.login_url});\n                        } else {\n                            finishAuth();\n                        }\n                    } else {\n                        error(this.createErrorObject('Login or pass not valid', INCORRECT_LOGIN_OR_PASSWORD_ERROR_CODE));\n                    }\n                }, function (err) {\n                    error(err);\n                });\n            } else if (prop.authType == 'sms') {\n                if (smsAuthStep == 'phone') {\n                    this.api.smsAuth(prop.phoneNumber, null, null);\n                } else if (smsAuthStep == 'code') {\n\n                }\n            } else {\n                console.error('Unknown auth type');\n            }\n        }\n    }\n\n    createErrorObject(message, code) {\n        return {\n            error: {\n                message: message,\n                code: code || -1\n            }\n        };\n    };\n\n    getProjectId() {\n        return this.config.projectId;\n    };\n\n    getRedirectURL() {\n        return this.config.redirectUrl;\n    };\n\n    getTheme() {\n        return this.config.theme;\n    }\n\n    getCallbackUrl() {\n        if (this.config.callbackUrl) {\n            return this.config.callbackUrl;\n        } else if (this.config.loginUrl) {\n            return this.config.loginUrl;\n        } else if (this.config.externalWindow) {\n            return DEFAULT_CONFIG.defaultLoginUrl;\n        }\n    };\n\n    getIframeSrc(options = {}) {\n        let widgetBaseUrl = options.widgetBaseUrl || this.config.widgetBaseUrl;\n\n        if (widgetBaseUrl.substr(-1) !== '/') {\n            widgetBaseUrl += '/';\n        }\n\n        const route = options.route || this.config.route;\n\n        let src = widgetBaseUrl + route + '?widget_sdk_version=' + version + '&projectId=' + this.getProjectId();\n\n        if (this.config.locale) {\n            src = src + '&locale=' + this.config.locale;\n        }\n        if (this.config.fields) {\n            src = src + '&fields=' + this.config.fields;\n        }\n        const redirectUrl = this.getRedirectURL();\n        if (redirectUrl) {\n            src = src + '&redirectUrl=' + encodeURIComponent(redirectUrl);\n        }\n\n        const callbackUrl = this.getCallbackUrl();\n\n        if (callbackUrl) {\n            src = src + '&login_url=' + encodeURIComponent(callbackUrl);\n        }\n\n        const theme = this.getTheme();\n        if (theme) {\n            src = src + '&theme=' + encodeURIComponent(theme);\n        }\n\n        const {externalWindow} = this.config;\n        if (externalWindow) {\n            src = src + '&external_window=' + encodeURIComponent(externalWindow);\n        }\n\n        const widgetVersion = this.config.widgetVersion;\n        if (widgetVersion) {\n            src += '&version=' + encodeURIComponent(widgetVersion);\n        }\n\n        const compact = this.config.compact;\n        if (compact) {\n            src += '&compact=' + encodeURIComponent(compact);\n        }\n\n        return src;\n    }\n\n    AuthWidget(elementId, options) {\n        if (this.api) {\n            if (!elementId) {\n                console.error('No div name!');\n            } else {\n                if (options == undefined) {\n                    options = {};\n                }\n                const width = `${options.width || 400}px`;\n                const height = `${options.height || 550}px`;\n\n                widgetIframe.onload = () => {\n                    element.removeChild(preloader);\n                    widgetIframe.style.width = '100%';\n                    widgetIframe.style.height = '100%';\n                    let event = new CustomEvent('load');\n                    this.dispatcher.dispatchEvent(event);\n                };\n                widgetIframe.style.width = 0;\n                widgetIframe.style.height = 0;\n                widgetIframe.frameBorder = '0';\n                widgetIframe.src = this.getIframeSrc(options);\n                widgetIframe.id = IFRAME_ID;\n\n                const preloader = document.createElement('div');\n\n                preloader.innerHTML = this.config.preloader;\n\n                const element = document.getElementById(elementId);\n                if (element) {\n                    element.style.width = width;\n                    element.style.height = height;\n                    element.appendChild(preloader);\n                    element.appendChild(widgetIframe);\n                } else {\n                    console.error('Element \\\"' + elementId + '\\\" not found!');\n                }\n\n            }\n        } else {\n            console.error('Please run XL.init() first');\n        }\n    };\n\n    onCloseEvent() {\n        widgetIframe.parentNode.removeChild(widgetIframe);\n    }\n\n    _hide() {\n        widgetIframe.style.position = '';\n        widgetIframe.style.zIndex = '';\n        widgetIframe.style.left = '';\n        widgetIframe.style.top = '';\n        widgetIframe.style.width = 0;\n        widgetIframe.style.height = 0;\n        widgetIframe.style.backgroundColor = '';\n    }\n\n    onHideEvent() {\n        if (this.config.inFullscreenMode) {\n            this._hide();\n        }\n    }\n\n    /**\n     * link event with handler\n     * @param event\n     * @param handler\n     */\n\n    on(event, handler) {\n        handler = handler || function() {};\n\n        if (event === this.eventTypes.CLOSE) {\n            if (!handler) {\n                handler = this.onCloseEvent;\n            }\n            else {\n                this.dispatcher.removeEventListener(event, this.onCloseEvent);\n            }\n        }\n\n        this.dispatcher.addEventListener(event, (e) => handler(e.detail));\n    };\n\n    _show() {\n        widgetIframe.style.position = 'fixed';\n        widgetIframe.style.zIndex = this.config.iframeZIndex;\n        widgetIframe.style.left = '0';\n        widgetIframe.style.top = '0';\n        widgetIframe.style.width = '100%';\n        widgetIframe.style.height = '100%';\n        widgetIframe.style.backgroundColor = this.config.popupBackgroundColor;\n        this.config.inFullscreenMode = true;\n    }\n\n    /**\n     * open fullsreen popup for widget\n     */\n\n    show() {\n        if (!document.getElementById(IFRAME_ID)) {\n            widgetIframe.src = this.getIframeSrc();\n            widgetIframe.id = IFRAME_ID;\n            widgetIframe.style.width = 0;\n            widgetIframe.style.height = 0;\n            widgetIframe.frameBorder = '0';\n\n            widgetIframe.onload = () => {\n                let event = new CustomEvent('load');\n                this.dispatcher.dispatchEvent(event);\n            };\n            this._show();\n\n            document.body.appendChild(widgetIframe);\n        } else {\n            this._show();\n        }\n    };\n}\n\nconst result = new XL();\n\nmodule.exports = result;"],"sourceRoot":"."}